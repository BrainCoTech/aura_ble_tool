# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: aura_record.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import aura_common_pb2 as aura__common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x11\x61ura_record.proto\x12\x11tech.brainco.aura\x1a\x11\x61ura_common.proto\"I\n\x06Record\x12\x11\n\ttimestamp\x18\x01 \x01(\x04\x12,\n\x04\x64\x61ta\x18\x02 \x01(\x0b\x32\x1e.tech.brainco.aura.RecordValue\"~\n\rSessionRecord\x12\x11\n\trecord_id\x18\x01 \x01(\r\x12\x17\n\x0fstart_timestamp\x18\x02 \x01(\x04\x12\x15\n\rend_timestamp\x18\x03 \x01(\x04\x12*\n\x07results\x18\x04 \x03(\x0b\x32\x19.tech.brainco.aura.Record\"\xab\x01\n\x0bRecordValue\x12+\n\x04type\x18\x01 \x01(\x0e\x32\x1d.tech.brainco.aura.RecordType\x12\x13\n\tint_value\x18\x02 \x01(\rH\x00\x12\x15\n\x0b\x66loat_value\x18\x03 \x01(\x02H\x00\x12:\n\x0e\x61\x63tivity_state\x18\x04 \x01(\x0e\x32 .tech.brainco.aura.ActivityStateH\x00\x42\x07\n\x05value*}\n\nRecordType\x12\x11\n\rDataType_NONE\x10\x00\x12\x0e\n\nHEART_RATE\x10\x01\x12\x0e\n\nSTEP_COUNT\x10\x02\x12\x12\n\x0eSTEP_FREQUENCY\x10\x03\x12\x12\n\x0e\x41\x43TIVITY_STATE\x10\x04\x12\x14\n\x10MOTION_MAGNITUDE\x10\x05\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'aura_record_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _RECORDTYPE._serialized_start=436
  _RECORDTYPE._serialized_end=561
  _RECORD._serialized_start=59
  _RECORD._serialized_end=132
  _SESSIONRECORD._serialized_start=134
  _SESSIONRECORD._serialized_end=260
  _RECORDVALUE._serialized_start=263
  _RECORDVALUE._serialized_end=434
# @@protoc_insertion_point(module_scope)
